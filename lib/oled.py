from ssd1306 import SSD1306_I2C
from time import sleep
import filemanager
import framebuf

#IMAGES TO DISPLAY
sun     = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x03\x00@\x81\x00@\x00\x00\x01\x80@\x81\x80\xc0\x00\x00\x00\xc0@\x03\x01\x80\x00\x00\x00\xe0\x00\x00\x03\x80\x00\x00\x000\x05\xf0\x07\x00\x00\x00\x00\x18?\xfe\x04\x00\x00\x00\x00\x01\xe0\x03\xc0\x00\x00\x00\x00\x01\xc0\x01\xc0\x00\x00\x00\x00\x07\x00\x00`\x00\x00\x00\x02\x0c\x00\x0080\x00\x00\x03\x18\x00\x00\x0c`\x00\x00\x008\x00\x00\x06\x00\x00\x00\x000\x00\x00\x06\x00\x00\x00\x00 \x00\x00\x03\x00\x00\x00\x00`\x00\x00\x03\x00\x00\x07\xc0\xc0\x00\x00\x01\x83\xf0\x07\xfc\xc0\x00\x00\x01\x8f\xf0\x00\x0c\xc0\x00\x00\x00\x8c\x00\x00\x00\xc0\x00\x00\x00\x80\x00\x00\x00\xc0\x00\x00\x00\x80\x00\x00\x00\xc0\x00\x00\x00\x80\x00\x00\x00\xc0\x00\x00\x00\x80\x00\x00\x00\xc0\x00\x00\x00\x80\x00\x00\x1c\xc0\x00\x00\x01\x9e\x00\x00\x00\xc0\x00\x00\x01\x80\x00\x00\x00`\x00\x00\x03\x00\x00\x00\x00`\x00\x00\x03\x00\x00\x00\x00 \x00\x00\x03\x00\x00\x00\x008\x00\x00\x06\x00\x00\x00\x03\x18\x00\x00\x0cp\x00\x00\x0f\x1c\x00\x00\x1cp\x00\x00\x1c\x06\x00\x008\x1e\x00\x00p\x03\x80\x00`\x07\x00\x00@\x01\xe0\x03\xc0\x01\x00\x00\x00\x18\x7f\xfe\x04\x00\x00\x00\x008\x1f\xfc\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x01\x00\x00\x00\x00\x00\x00@\x81\x80\x00\x00\x00\x00\x00\xc0\x81\x80\x00\x00\x00\x00\x00\xc0\x81\x80\x00\x00\x00\x00\x01\x80\x00\xc0\x00\x00\x00\x00\x01\x80\x00@\x00\x00\x00\x00\x01\x80\x00@\x00\x00\x00\x00\x03\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
cloud   = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xc0\x00\x00\x00\x00\x00\x00\x18`\x00\x00\x00\x00\x00\x0000\x00\x00\x00\x00\x00\x03\xe0\x18\x00\x00\x00\x00\x00\x06\x00\x18\x00\x00\x00\x00\x00\x0c\x00\x1e\x00\x00\x00\x00\x00\x0c\x00\x1f\x00\x00\x1f\x00\x00\x0c\x00\x01\x00\x00\x7f\xe0\x00\x0c\x00\x01\x80\x00\xc08\x00\x06\x00\x03\x00\x01\x80\x18\x00\x03\xff\xff\x00\x03\x00\x0c\x00\x00\xe5P\x00\x06\x00\x06\x00\x00\x00\x00\x00\x06\x00\x07\xf8\x00\x00\x00\x00\x04\x00\x03\x0c\x00\x00\x00\x00\x04\x00\x00\x06\x00\x00\x00\x00\x0c\x00\x00\x03\x00\x00\x00\x00\xfc\x00\x00\x03\x00\x00\x00\x00\xdc\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x80\x00\x00\x0c\x00\x00\x00\x00\xff\xff\xff\xf8\x00\x00\x00\x00\x16\xaf\xf5`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00\x00\x00\x00\x00\x00\x03\xff\xc0\x00\x00\x00\x00\x00\x0f\x00\xf0\x00\x00\x00\x00\x00\x1c\x008\x00\x00\x00\x00\x000\x00\x0c\x00\x00\x00\x00\x00`\x00\x06\x00\x00\x00\x00\x00\xc0\x00\x03\x00\x00\x00\x00\x01\x80\x00\x01\x80\x00\x00\x00\x01\x00\x00\x01\x80\x00\x00\x03\xff\x00\x00\x00\x80\x00\x00\x07O\x00\x00\x00@\x00\x00\x1c\x00\x00\x00\x00@\x00\x008\x00\x00\x00\x00`\x00\x000\x00\x00\x00\x00`\x00\x00`\x00\x00\x00\x00`\x00\x00`\x00\x00\x00\x00|\x00\x00\xc0\x00\x00\x00\x00\x7f\x80\x00@\x00\x00\x00\x00@\xc0\x00\xc0\x00\x00\x00\x00\x00 \x00\xc0\x00\x00\x00\x00\x000\x00\xc0\x00\x00\x00\x00\x00\x10\x00\xc0\x00\x00\x00\x00\x00\x18\x00@\x00\x00\x00\x00\x00\x18\x00`\x00\x00\x00\x00\x00\x18\x00`\x00\x00\x00\x00\x000\x000\x00\x00\x00\x00\x000\x00\x1c\x00\x00\x00\x00\x00`\x00\x0e\x00\x00\x00\x00\x00\xc0\x00\x03\xff\xff\xff\xff\xff\x80\x00\x00\xff\xff\xff\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
thunder = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00\x0f\xff\x80\x00\x00\x00\x00\x00x\x01\xe0\x00\x00\x00\x00\x00\xe0\x008\x00\x00\x00\x00\x01\xc0\x00\x1c\x00\x00\x00\x00\x03\x00\x00\x0e\x00\x00\x00\x00\x06\x00\x00\x03\x00\x00\x00\x00\x0c\x00\x00\x01\x80\x00\x00\x00\x18\x00\x00\x01\x80\x00\x00\x008\x00\x00\x00\xc0\x00\x00\x000\x00\x00\x00@\x00\x00\xff\xa0\x00\x00\x00`\x00\x03\xc1\xe0\x00\x00\x00 \x00\x07\x00\x00\x00\x00\x000\x00\x0c\x00\x00\x00\x00\x000\x00\x18\x00\x00\x00\x00\x00\x10\x000\x00\x00\x00\x00\x00\x10\x00 \x00\x00\x00\x00\x00\x10\x00`\x00\x00\x00\x00\x00\x10\x00@\x00\x00\x00\x00\x00\x17\xe0\xc0\x00\x00\x00\x00\x00\x1e\xf8\xc0\x00\x00\x00\x00\x00\x10\x1c\xc0\x00\x00\x00\x00\x00\x00\x06\xc0\x00\x00\x00\x00\x00\x00\x06\xc0\x00\x00\x00\x00\x00\x00\x03\xc0\x00\x00\x00\x00\x00\x00\x03\xc0\x00\x00\x00\xff\xc0\x00\x01@\x00\x00\x00\xc1\x80\x00\x01`\x00\x00\x01\x81\x80\x00\x01 \x00\x00\x03\x83\x00\x00\x030\x00\x00\x03\x03\x00\x00\x03\x18\x00\x00\x02\x06\x00\x00\x02\x0c\x00\x00\x06\x06\x00\x00\x06\x07\x00\x00\x04\x0c\x00\x00\x0c\x03\xc0\x00\x0c\x08\x00\x00x\x00\xff\xff\xf8\x1f\xff\xff\xe0\x00\x06\x03\x180\x18\x0c\x00\x00\x04\x02\x100\x18\x08\x00\x00\x0c\x060`0\x18\x00\x00\x08\x04 \x7f0\x10\x00\x00\x08\x04`\x06\x00\x10\x00\x00\x00\x00@\x0c\x00\x00\x00\x000\x18\xfc\x18\xc0`\x00\x0008\xfc8\xc0`\x00\x00 0\x18p\x80@\x00\x00`0\x18\xe1\x80\xc0\x00\x00@`1\xc1\x00\x80\x00\x00@@3\x81\x00\x80\x00\x00\x00\x00g\x00\x00\x00\x00\x01\x80\x80N\x06\x03\x00\x00\x01\x01\x80\xdc\x04\x02\x00\x00\x03\x01\x00\x98\x0c\x06\x00\x00\x06\x03\x01\xb0\x0c\x0c\x00\x00\x06\x02\x01`\x18\x0c\x00\x00\x04\x02\x03\xc0\x00\x08\x00\x00\x00\x00\x07\x80\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
#raspy_logo = bytearray(b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|?\x00\x01\x86@\x80\x01\x01\x80\x80\x01\x11\x88\x80\x01\x05\xa0\x80\x00\x83\xc1\x00\x00C\xe3\x00\x00~\xfc\x00\x00L'\x00\x00\x9c\x11\x00\x00\xbf\xfd\x00\x00\xe1\x87\x00\x01\xc1\x83\x80\x02A\x82@\x02A\x82@\x02\xc1\xc2@\x02\xf6>\xc0\x01\xfc=\x80\x01\x18\x18\x80\x01\x88\x10\x80\x00\x8c!\x00\x00\x87\xf1\x00\x00\x7f\xf6\x00\x008\x1c\x00\x00\x0c \x00\x00\x03\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
raspy_logo = bytearray(b'\x00\x03\x00\x02@\x00\x00?\xf0\x0f\xfc\x00\x00\xff\xf8?\xff\x00\x00\x7f\xfc?\xfe\x00\x00\x7f\xfe\x7f\xff\x00\x00~~~\x7f\x00\x00?\xbe}\xfe\x00\x00?\xees\xfe\x00\x00?\xf0\x0f\xfe\x00\x00\x1f\xf8\x0f\xf8\x00\x00\x0f\xf0\x0f\xf8\x00\x00\x07\xe0\x07\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\xe0\x00\x00\x00\x07\xcf\xfb\xe0\x00\x00\x0f\x9f\xf9\xf0\x00\x00\x1f\x1f\xfc\xf8\x00\x00>\x0f\xf8|\x00\x00<\x03\xe0<\x00\x008`\x0f\x1c\x00\x00!\xfc\x1f\xc4\x00\x00\x03\xfc?\xe0\x00\x00\x07\xfe?\xe0\x00\x00\xc7\xfe\x7f\xf3\x00\x01\xcf\xfe\x7f\xf3\x80\x03\xcf\xfe?\xf3\xc0\x03\xcf\xfe?\xf3\xc0\x03\xcf\xfc?\xf3\xc0\x03\xc7\xfc\x1f\xf3\xc0\x03\xc7\xf8\x0f\xe3\xc0\x03\x83\xe3\xe3\xc1\xc0\x01\x80\x0f\xf0\x01\x80\x01\x00\x1f\xf8\x0c\x00\x008\x1f\xfc\x1e\x00\x00|\x1f\xfc~\x00\x00~\x1f\xfc\x7f\x00\x00\x7f\x1f\xfc\xff\x00\x00\x7f\x9f\xfd\xfe\x00\x00\x7f\x9f\xf9\xfe\x00\x00?\x8f\xf1\xfe\x00\x00\x1f\xc3\xe1\xfc\x00\x00\x0f\x80\x01\xf8\x00\x00\x07\x80\x01\xe0\x00\x00\x00\x0f\xf8\x00\x00\x00\x00\x1f\xfc\x00\x00\x00\x00\x1f\xf8\x00\x00\x00\x00\x0f\xf0\x00\x00\x00\x00\x03\xe0\x00\x00')

raspi  = framebuf.FrameBuffer(raspy_logo, 48, 48, framebuf.MONO_HLSB)
sunny  = framebuf.FrameBuffer(sun, 64, 64, framebuf.MONO_HLSB)
stormy = framebuf.FrameBuffer(thunder, 64, 64, framebuf.MONO_HLSB)
cloudy = framebuf.FrameBuffer(cloud, 64, 64, framebuf.MONO_HLSB)
imagelist = [sunny, stormy, cloudy]

#Generic class oled for generic purpouse, based on ssd1306 lib
class Oled:
    def __init__(self, width, heigth, i2c):
        self.oled = SSD1306_I2C(width, heigth, i2c)
        
    def clear(self):
        self.oled.fill(0)
        self.oled.show()
    
    def image(self, fb, x, y):
        self.oled.blit(fb, x, y)
        self.oled.show()
        
    def frame(self, x, y, w, h, c):
        self.oled.rect(x, y, w, h, c)
        self.oled.show()
    
    def threewords(self, w1, w2, w3):
        x = 64 - ((len(w1) * 8) // 2)
        self.oled.text(w1, x, 8)
        x = 64 - ((len(w2) * 8) // 2)
        self.oled.text(w2, x, 24)
        x = 64 - ((len(w3) * 8) // 2)
        self.oled.text(w3, x, 35)
        self.oled.show()
        
    '''
    @deprecated
    --This method draws a bouncing 48x48 image, but the oled render dirt on the edges of the image
    def bouncing_logo(self):
        dx = 1
        dy = 1
        x = 1
        y = 1
        for loop in range(200):
            self.image(raspi, x, y)
            x = x + dx
            y = y + dy
            if (x == 95) or (x == 1):
                dx = dx * -1
            if (y == 31) or (y == 1):
                dy = dy * -1
    '''
    
    def xtransl_logo(self):
        self.frame(0, 0, 128, 64, 1)
        self.frame(1, 1, 126, 62, 1)
        dx = 1
        x = 3
        for loop in range(700):
            self.image(raspi, x, 8)
            x = x + dx
            if (x == 78) or (x == 3):
                dx = dx * -1
        self.clear()
    
        
#subclass of oled, manages the graphs, lighting up the pixels to create the graph curve
class Charts_and_Images(Oled):
    def __init__(self, width, heigth, i2c):
        super().__init__(width, heigth, i2c)
   
    def temp_chart(self, record):
        self.oled.fill(0)
        self.oled.show()
        self.oled.text("Temperature", 24, 0)
        self.oled.text(" 0", 0, 52)
        self.oled.text("20", 0, 30)
        self.oled.text("40", 0, 8)
        
        self.oled.hline(16, 34, 3, 1)
        self.oled.hline(16, 8, 3, 1)
        self.oled.hline(8, 60, 128, 1)
        self.oled.vline(17, 8, 56, 1)
        
        if record:
            for x, y in record:
                self.oled.pixel(x, y, 1) 
        self.oled.show()
        
    def hum_chart(self, record):
        self.oled.fill(0)
        self.oled.show()
        self.oled.text("Humidity", 40, 0)
        self.oled.text("  0", 0, 52)
        self.oled.text(" 50", 0, 30)
        self.oled.text("100", 0, 8)
        
        self.oled.hline(24, 34, 3, 1)
        self.oled.hline(24, 8, 3, 1)
        self.oled.hline(8, 60, 128, 1)
        self.oled.vline(25, 8, 56, 1)
        
        if record:
            for x, y in record:
                self.oled.pixel(x, y, 1) 
        self.oled.show()
        
    def press_chart(self, record):
        self.oled.fill(0)
        self.oled.show()
        self.oled.text("Pressure", 50, 0)
        self.oled.text(" 975", 0, 52)
        self.oled.text("1012", 0, 30)
        self.oled.text("1050", 0, 8)
        
        self.oled.hline(32, 34, 3, 1)
        self.oled.hline(32, 8, 3, 1)
        self.oled.hline(26, 60, 128, 1)
        self.oled.vline(33, 8, 56, 1)
        
        if record:
            for x, y in record:
                self.oled.pixel(x, y, 1) 
        self.oled.show()
    
    #After the right calculations to format the values in ycoord, turn on the pixel (x, y) and save the coordinates in the file
    def turnon_pixel(self, type_chart, value, xcoord, file):
        ycoord = 0
        
        if type_chart == "temperature":
            ycoord = 60 - ((26 * value) // 20)
          
        elif type_chart == "humidity":
            ycoord = 60 - ((26 * value) // 50)
            
        else:
            perc = ((value - 975) * 100) // 75
            ycoord = 60 - ((26 * perc) // 50)
        
        if ycoord < 8 and ycoord > 60:
            return
        
        #This block adds extra coordinates to make the graph curve smooth
        listoftuple = file.read()
        if listoftuple:
            x, y = listoftuple[-1]
            if y < ycoord:
                for i in range(y+1, ycoord+1, 1):
                    file.write(xcoord, i)
                    self.oled.pixel(xcoord, i, 1)
                    
            if y > ycoord:
                for i in range(ycoord, y, 1):
                    file.write(xcoord, i)
                    self.oled.pixel(xcoord, i, 1)
                    
        #Adds only coordinates if they are in the right range                
        file.write(xcoord, ycoord)
        self.oled.pixel(xcoord, ycoord)
        self.oled.show()
    
    #These three function below print an image relating to the current situation compared to the previous one
    def pressure_image(self, last_value):
        self.clear()
        if last_value < 1005:
            self.oled.text("Weather:", 66, 0)
            self.oled.text("probably", 64, 10)
            self.oled.text("stormy", 72, 20)
            self.image(stormy, 0, 0)
            
        elif last_value <= 1015 and last_value >= 1005:
            self.oled.text("Weather:", 66, 0)
            self.oled.text("probably", 64, 10)
            self.oled.text("cloudy", 72, 20)
            self.oled.text("or", 88, 30)
            self.oled.text("rainy", 76, 40)
            self.image(cloudy, 0, 0)
            
        elif last_value > 1025:
            self.oled.text("Weather:", 66, 0)
            self.oled.text("sunny", 76, 10)
            self.image(sunny, 0, 0)
        else:
            self.oled.text("Weather:", 66, 0)
            self.oled.text("probably", 64, 10)
            self.oled.text("sunny", 76, 20)
            self.image(sunny, 0, 0)
        sleep(3.5)
        self.clear()       
        
        
#subclass of oled, print the bme280 snapshot on oled, also print the app name.        
class Snapshot(Oled):
    def __init__(self, width, heigth, i2c):
        super().__init__(width, heigth, i2c)
    
    def print_name(self, name):
        self.oled.fill(0)
        self.oled.show()
        x = 64 - ((len(name) * 8) // 2) 
        self.oled.text(name, x, 4)
    
    def print_temperature(self, value):
        self._clear_temp()
        tstring = "Temp:" + str(value)
        tstring_len = len(tstring) * 8
        self.oled.pixel(tstring_len+4, 22, 1)
        self.oled.pixel(tstring_len+3, 23, 1)
        self.oled.pixel(tstring_len+5, 23, 1)
        self.oled.pixel(tstring_len+4, 24, 1)
        self.oled.text(tstring, 2, 22)
        self.oled.text("C", tstring_len+7, 22)
        self.oled.show()
        
    def print_humidity(self, value):
        self._clear_hum()
        hstring = "Umid:" + str(value) + "%"
        self.oled.text(hstring, 2, 38)
        self.oled.show()
        
    def print_pressure(self, value):
        self._clear_press()
        pstring = "Pres:" + str(value) + "hPa"
        self.oled.text(pstring, 2, 54)
        self.oled.show()
        
    def _clear_temp(self):
        for i in range(40, 126, 1):
            self.oled.pixel(i, 22, 0)
            self.oled.pixel(i, 23, 0)
            self.oled.pixel(i, 24, 0)
            self.oled.pixel(i, 25, 0)
            self.oled.pixel(i, 26, 0)
            self.oled.pixel(i, 27, 0)
            self.oled.pixel(i, 28, 0)
            self.oled.pixel(i, 29, 0)
        self.oled.show()
        
    def _clear_hum(self):
        for i in range(40, 126, 1):
            self.oled.pixel(i, 38, 0)
            self.oled.pixel(i, 39, 0)
            self.oled.pixel(i, 40, 0)
            self.oled.pixel(i, 41, 0)
            self.oled.pixel(i, 42, 0)
            self.oled.pixel(i, 43, 0)
            self.oled.pixel(i, 44, 0)
            self.oled.pixel(i, 45, 0)
        self.oled.show()
        
    def _clear_press(self):
        for i in range(40, 126, 1):
            self.oled.pixel(i, 54, 0)
            self.oled.pixel(i, 55, 0)
            self.oled.pixel(i, 56, 0)
            self.oled.pixel(i, 57, 0)
            self.oled.pixel(i, 58, 0)
            self.oled.pixel(i, 59, 0)
            self.oled.pixel(i, 60, 0)
            self.oled.pixel(i, 61, 0)
        self.oled.show()