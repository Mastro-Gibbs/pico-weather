from ssd1306 import SSD1306_I2C
from time import sleep
import filemanager
import framebuf


#IMAGES TO DISPLAY
sun = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x03\x00@\x81\x00@\x00\x00\x01\x80@\x81\x80\xc0\x00\x00\x00\xc0@\x03\x01\x80\x00\x00\x00\xe0\x00\x00\x03\x80\x00\x00\x000\x05\xf0\x07\x00\x00\x00\x00\x18?\xfe\x04\x00\x00\x00\x00\x01\xe0\x03\xc0\x00\x00\x00\x00\x01\xc0\x01\xc0\x00\x00\x00\x00\x07\x00\x00`\x00\x00\x00\x02\x0c\x00\x0080\x00\x00\x03\x18\x00\x00\x0c`\x00\x00\x008\x00\x00\x06\x00\x00\x00\x000\x00\x00\x06\x00\x00\x00\x00 \x00\x00\x03\x00\x00\x00\x00`\x00\x00\x03\x00\x00\x07\xc0\xc0\x00\x00\x01\x83\xf0\x07\xfc\xc0\x00\x00\x01\x8f\xf0\x00\x0c\xc0\x00\x00\x00\x8c\x00\x00\x00\xc0\x00\x00\x00\x80\x00\x00\x00\xc0\x00\x00\x00\x80\x00\x00\x00\xc0\x00\x00\x00\x80\x00\x00\x00\xc0\x00\x00\x00\x80\x00\x00\x00\xc0\x00\x00\x00\x80\x00\x00\x1c\xc0\x00\x00\x01\x9e\x00\x00\x00\xc0\x00\x00\x01\x80\x00\x00\x00`\x00\x00\x03\x00\x00\x00\x00`\x00\x00\x03\x00\x00\x00\x00 \x00\x00\x03\x00\x00\x00\x008\x00\x00\x06\x00\x00\x00\x03\x18\x00\x00\x0cp\x00\x00\x0f\x1c\x00\x00\x1cp\x00\x00\x1c\x06\x00\x008\x1e\x00\x00p\x03\x80\x00`\x07\x00\x00@\x01\xe0\x03\xc0\x01\x00\x00\x00\x18\x7f\xfe\x04\x00\x00\x00\x008\x1f\xfc\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x01\x00\x00\x00\x00\x00\x00@\x81\x80\x00\x00\x00\x00\x00\xc0\x81\x80\x00\x00\x00\x00\x00\xc0\x81\x80\x00\x00\x00\x00\x01\x80\x00\xc0\x00\x00\x00\x00\x01\x80\x00@\x00\x00\x00\x00\x01\x80\x00@\x00\x00\x00\x00\x03\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
cloud = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xc0\x00\x00\x00\x00\x00\x00\x18`\x00\x00\x00\x00\x00\x0000\x00\x00\x00\x00\x00\x03\xe0\x18\x00\x00\x00\x00\x00\x06\x00\x18\x00\x00\x00\x00\x00\x0c\x00\x1e\x00\x00\x00\x00\x00\x0c\x00\x1f\x00\x00\x1f\x00\x00\x0c\x00\x01\x00\x00\x7f\xe0\x00\x0c\x00\x01\x80\x00\xc08\x00\x06\x00\x03\x00\x01\x80\x18\x00\x03\xff\xff\x00\x03\x00\x0c\x00\x00\xe5P\x00\x06\x00\x06\x00\x00\x00\x00\x00\x06\x00\x07\xf8\x00\x00\x00\x00\x04\x00\x03\x0c\x00\x00\x00\x00\x04\x00\x00\x06\x00\x00\x00\x00\x0c\x00\x00\x03\x00\x00\x00\x00\xfc\x00\x00\x03\x00\x00\x00\x00\xdc\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x80\x00\x00\x0c\x00\x00\x00\x00\xff\xff\xff\xf8\x00\x00\x00\x00\x16\xaf\xf5`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00|\x00\x00\x00\x00\x00\x00\x03\xff\xc0\x00\x00\x00\x00\x00\x0f\x00\xf0\x00\x00\x00\x00\x00\x1c\x008\x00\x00\x00\x00\x000\x00\x0c\x00\x00\x00\x00\x00`\x00\x06\x00\x00\x00\x00\x00\xc0\x00\x03\x00\x00\x00\x00\x01\x80\x00\x01\x80\x00\x00\x00\x01\x00\x00\x01\x80\x00\x00\x03\xff\x00\x00\x00\x80\x00\x00\x07O\x00\x00\x00@\x00\x00\x1c\x00\x00\x00\x00@\x00\x008\x00\x00\x00\x00`\x00\x000\x00\x00\x00\x00`\x00\x00`\x00\x00\x00\x00`\x00\x00`\x00\x00\x00\x00|\x00\x00\xc0\x00\x00\x00\x00\x7f\x80\x00@\x00\x00\x00\x00@\xc0\x00\xc0\x00\x00\x00\x00\x00 \x00\xc0\x00\x00\x00\x00\x000\x00\xc0\x00\x00\x00\x00\x00\x10\x00\xc0\x00\x00\x00\x00\x00\x18\x00@\x00\x00\x00\x00\x00\x18\x00`\x00\x00\x00\x00\x00\x18\x00`\x00\x00\x00\x00\x000\x000\x00\x00\x00\x00\x000\x00\x1c\x00\x00\x00\x00\x00`\x00\x0e\x00\x00\x00\x00\x00\xc0\x00\x03\xff\xff\xff\xff\xff\x80\x00\x00\xff\xff\xff\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
thunder = bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xf8\x00\x00\x00\x00\x00\x00\x0f\xff\x80\x00\x00\x00\x00\x00x\x01\xe0\x00\x00\x00\x00\x00\xe0\x008\x00\x00\x00\x00\x01\xc0\x00\x1c\x00\x00\x00\x00\x03\x00\x00\x0e\x00\x00\x00\x00\x06\x00\x00\x03\x00\x00\x00\x00\x0c\x00\x00\x01\x80\x00\x00\x00\x18\x00\x00\x01\x80\x00\x00\x008\x00\x00\x00\xc0\x00\x00\x000\x00\x00\x00@\x00\x00\xff\xa0\x00\x00\x00`\x00\x03\xc1\xe0\x00\x00\x00 \x00\x07\x00\x00\x00\x00\x000\x00\x0c\x00\x00\x00\x00\x000\x00\x18\x00\x00\x00\x00\x00\x10\x000\x00\x00\x00\x00\x00\x10\x00 \x00\x00\x00\x00\x00\x10\x00`\x00\x00\x00\x00\x00\x10\x00@\x00\x00\x00\x00\x00\x17\xe0\xc0\x00\x00\x00\x00\x00\x1e\xf8\xc0\x00\x00\x00\x00\x00\x10\x1c\xc0\x00\x00\x00\x00\x00\x00\x06\xc0\x00\x00\x00\x00\x00\x00\x06\xc0\x00\x00\x00\x00\x00\x00\x03\xc0\x00\x00\x00\x00\x00\x00\x03\xc0\x00\x00\x00\xff\xc0\x00\x01@\x00\x00\x00\xc1\x80\x00\x01`\x00\x00\x01\x81\x80\x00\x01 \x00\x00\x03\x83\x00\x00\x030\x00\x00\x03\x03\x00\x00\x03\x18\x00\x00\x02\x06\x00\x00\x02\x0c\x00\x00\x06\x06\x00\x00\x06\x07\x00\x00\x04\x0c\x00\x00\x0c\x03\xc0\x00\x0c\x08\x00\x00x\x00\xff\xff\xf8\x1f\xff\xff\xe0\x00\x06\x03\x180\x18\x0c\x00\x00\x04\x02\x100\x18\x08\x00\x00\x0c\x060`0\x18\x00\x00\x08\x04 \x7f0\x10\x00\x00\x08\x04`\x06\x00\x10\x00\x00\x00\x00@\x0c\x00\x00\x00\x000\x18\xfc\x18\xc0`\x00\x0008\xfc8\xc0`\x00\x00 0\x18p\x80@\x00\x00`0\x18\xe1\x80\xc0\x00\x00@`1\xc1\x00\x80\x00\x00@@3\x81\x00\x80\x00\x00\x00\x00g\x00\x00\x00\x00\x01\x80\x80N\x06\x03\x00\x00\x01\x01\x80\xdc\x04\x02\x00\x00\x03\x01\x00\x98\x0c\x06\x00\x00\x06\x03\x01\xb0\x0c\x0c\x00\x00\x06\x02\x01`\x18\x0c\x00\x00\x04\x02\x03\xc0\x00\x08\x00\x00\x00\x00\x07\x80\x00\x00\x00\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
thermo = bytearray(b'\x00\x07\xe0\x00\x00\x1f\xf8\x00\x00?\xfc\x00\x00?\xfe\x00\x00|>\x00\x00x\x1f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf0\x0f\x00\x00\xf1\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x00\x00\xf3\xcf\x80\x01\xf3\xcf\xc0\x03\xe3\xc7\xc0\x07\xc3\xe3\xe0\x07\xcf\xf1\xe0\x07\x9f\xf9\xf0\x0f\x9f\xfc\xf0\x0f?\xfc\xf0\x0f?\xfc\xf0\x0f?\xfc\xf0\x0f?\xfc\xf0\x0f\x9f\xfc\xf0\x07\x9f\xf9\xf0\x07\xcf\xf1\xe0\x03\xc3\xc3\xe0\x03\xf0\x07\xc0\x01\xfc\x1f\xc0\x00\xff\xff\x80\x00\x7f\xfe\x00\x00?\xfc\x00\x00\x07\xe0\x00')

sunny = framebuf.FrameBuffer(sun, 64, 64, framebuf.MONO_HLSB)
thundery = framebuf.FrameBuffer(thunder, 64, 64, framebuf.MONO_HLSB)
cloudy = framebuf.FrameBuffer(cloud, 64, 64, framebuf.MONO_HLSB)
thermometer = framebuf.FrameBuffer(thermo, 32, 64, framebuf.MONO_HLSB)

positive_arrow = [(34, 27), (34, 28), (34, 29), (34, 30), (34, 31), (34, 32), (34, 33), (34, 34), (34, 35), (34, 36), (34, 37), (34, 38), (35, 27), (35, 28), (35, 29), (35, 30), (35, 31), (35, 32), (35, 33), (35, 34), (35, 35), (35, 36), (35, 37), (35, 38), (33, 28), (36, 28), (33, 29), (36, 29), (32, 29), (37, 29), (32, 30), (37, 30), (31, 30), (38, 30)]
negative_arrow = [(34, 27), (34, 28), (34, 29), (34, 30), (34, 31), (34, 32), (34, 33), (34, 34), (34, 35), (34, 36), (34, 37), (34, 38), (35, 27), (35, 28), (35, 29), (35, 30), (35, 31), (35, 32), (35, 33), (35, 34), (35, 35), (35, 36), (35, 37), (35, 38), (33, 37), (36, 37), (33, 36), (36, 36), (32, 36), (37, 36), (32, 35), (37, 35), (31, 35), (38, 35)]  


#Generic class oled for generic purpouse, based on ssd1306 lib
class Oled:
    def __init__(self, width, heigth, i2c):
        self.oled = SSD1306_I2C(width, heigth, i2c)
        
    def clear(self):
        self.oled.fill(0)
        self.oled.show()
    
    def image(self, fb, x, y):
        self.oled.blit(fb, x, y)
        self.oled.show()
        
    def frame(self, x, y, w, h, c):
        self.oled.rect(x, y, w, h, c)
        self.oled.show()
        
    def pixel_on(self, coords, c=1):
        for xcoord, ycoord in coords:
            self.oled.pixel(xcoord, ycoord, c)
        self.oled.show()
    
    def info(self, name, step, descr):
        x = 64 - ((len(name) * 8) // 2)
        self.oled.text(name, x, 2)
        x = 64 - ((len(step) * 8) // 2)
        self.oled.text(step, x, 24)
        x = 64 - ((len(descr) * 8) // 2)
        self.oled.text(descr, x, 35)
        self.oled.show()

#subclass of oled, manages the graphs, lighting up the pixels to create the graph curve
class Charts_and_Images(Oled):
    def __init__(self, width, heigth, i2c):
        super().__init__(width, heigth, i2c)
   
    def temp_chart(self, record=None):
        self.oled.fill(0)
        self.oled.show()
        self.oled.text("Temperature", 24, 0)
        self.oled.text(" 0", 0, 52)
        self.oled.text("20", 0, 30)
        self.oled.text("40", 0, 8)
        
        self.oled.hline(16, 34, 3, 1)
        self.oled.hline(16, 8, 3, 1)
        self.oled.hline(8, 60, 128, 1)
        self.oled.vline(17, 8, 56, 1)
        
        if record != None and len(record) != 0:
            for x, y in record:
                self.oled.pixel(x, y, 1) 
        self.oled.show()
        
    def hum_chart(self, record=None):
        self.oled.fill(0)
        self.oled.show()
        self.oled.text("Humidity", 40, 0)
        self.oled.text("  0", 0, 52)
        self.oled.text(" 50", 0, 30)
        self.oled.text("100", 0, 8)
        
        self.oled.hline(24, 34, 3, 1)
        self.oled.hline(24, 8, 3, 1)
        self.oled.hline(8, 60, 128, 1)
        self.oled.vline(25, 8, 56, 1)
        
        if record != None and len(record) != 0:
            for x, y in record:
                self.oled.pixel(x, y, 1) 
        self.oled.show()
        
    def press_chart(self, record=None):
        self.oled.fill(0)
        self.oled.show()
        self.oled.text("Pressure", 50, 0)
        self.oled.text(" 975", 0, 52)
        self.oled.text("1012", 0, 30)
        self.oled.text("1050", 0, 8)
        
        self.oled.hline(32, 34, 3, 1)
        self.oled.hline(32, 8, 3, 1)
        self.oled.hline(26, 60, 128, 1)
        self.oled.vline(33, 8, 56, 1)
        
        if record != None and len(record) != 0:
            for x, y in record:
                self.oled.pixel(x, y, 1) 
        self.oled.show()
    
    #After the right calculations to format the values in ycoord, turn on the pixel (x, y) and save the coordinates in the file
    def turnon_pixel(self, type_chart, value, xcoord):
        file = ""
        ycoord = 0
        
        if type_chart == "temperature":
            ycoord = 60 - ((26 * value) // 20)
            file = filemanager.Filemanager("data/temperature")
          
        elif type_chart == "humidity":
            ycoord = 60 - ((26 * value) // 50)
            file = filemanager.Filemanager("data/humidity")
            
        else:
            perc = ((value - 975) * 100) // 75
            ycoord = 60 - ((26 * perc) // 50)
            file = filemanager.Filemanager("data/pressure")
        
        #This block adds extra coordinates to make the graph curve smooth
        listoftuple = file.read()
        if len(listoftuple) != 0:
            x, y = listoftuple[-1]
            if y < ycoord and ycoord >= 8:
                for i in range(y, ycoord, 1):
                    file.write(xcoord, i)
                    self.oled.pixel(xcoord, i, 1)
                    
            if y > ycoord and ycoord >= 8:
                for i in range(ycoord, y, 1):
                    file.write(xcoord, i)
                    self.oled.pixel(xcoord, i, 1)
                    
        #Adds only coordinates if they are in the right range         
        if ycoord >= 8 and ycoord <= 60:          
            file.write(xcoord, ycoord)           
            self.oled.pixel(xcoord, ycoord, 1)
        self.oled.show()
    
    #These two function below print an image relating to the current situation compared to the previous one
    def pressure_image(self, last_value):
        self.clear()
        if last_value[1] > 36:
            self.oled.text("Weather:", 66, 0)
            self.oled.text("probably", 64, 10)
            self.oled.text("stormy", 72, 20)
            self.image(thundery, 0, 0)
            
        elif last_value[1] <= 35 and last_value[1] > 32:
            self.oled.text("Weather:", 66, 0)
            self.oled.text("probably", 64, 10)
            self.oled.text("cloudy", 72, 20)
            self.image(cloudy, 0, 0)
        else:
            self.oled.text("Weather:", 66, 0)
            self.oled.text("probably", 64, 10)
            self.oled.text("sunny", 76, 20)
            self.image(sunny, 0, 0)
        sleep(5)
        self.clear()

    def temperature_image(self, secondlast_value, last_value):
        self.clear()
        if (last_value[1] - secondlast_value[1]) < 0:
            self.oled.text("Temperature:", 34, 0)
            self.oled.text("increasing", 40, 10)
            self.image(thermometer, 0, 0)
            self.pixel_on(positive_arrow)
            
        elif (last_value[1] - secondlast_value[1]) == 0:
            self.oled.text("Temperature:", 34, 0)
            self.oled.text("stable", 56, 10)
            self.image(thermometer, 0, 0)
            
        else:
            self.oled.text("Temperature:", 34, 0)
            self.oled.text("falling", 64, 10)
            self.image(thermometer, 0, 0)
            self.pixel_on(negative_arrow)
        sleep(5)
        self.clear()
    
#subclass of oled, print the bme280 snapshot on oled, also print the app name.        
class Snapshot(Oled):
    def __init__(self, width, heigth, i2c):
        super().__init__(width, heigth, i2c)
    
    def print_name(self, name):
        self.oled.fill(0)
        self.oled.show()
        x = 64 - ((len(name) * 8) // 2) 
        self.oled.text(name, x, 0)
    
    def print_temperature(self, value):
        self._clear_temp()
        tstring = "Temp:" + str(value)
        tstring_len = len(tstring) * 8
        self.oled.pixel(tstring_len+2, 16, 1)
        self.oled.pixel(tstring_len+1, 17, 1)
        self.oled.pixel(tstring_len+3, 17, 1)
        self.oled.pixel(tstring_len+2, 18, 1)
        self.oled.text(tstring, 0, 16)
        self.oled.text("C", tstring_len+5, 16)
        self.oled.show()
        
    def print_humidity(self, value):
        self._clear_hum()
        hstring = "Umid:" + str(value) + "%"
        self.oled.text(hstring, 0, 32)
        self.oled.show()
        
    def print_pressure(self, value):
        self._clear_press()
        pstring = "Pres:" + str(value) + "hPa"
        self.oled.text(pstring, 0, 48)
        self.oled.show()
        
    def _clear_temp(self):
        for i in range(40, 128, 1):
            self.oled.pixel(i, 16, 0)
            self.oled.pixel(i, 17, 0)
            self.oled.pixel(i, 18, 0)
            self.oled.pixel(i, 19, 0)
            self.oled.pixel(i, 20, 0)
            self.oled.pixel(i, 21, 0)
            self.oled.pixel(i, 22, 0)
            self.oled.pixel(i, 23, 0)
        self.oled.show()
        
    def _clear_hum(self):
        for i in range(40, 128, 1):
            self.oled.pixel(i, 32, 0)
            self.oled.pixel(i, 33, 0)
            self.oled.pixel(i, 34, 0)
            self.oled.pixel(i, 35, 0)
            self.oled.pixel(i, 36, 0)
            self.oled.pixel(i, 37, 0)
            self.oled.pixel(i, 38, 0)
            self.oled.pixel(i, 39, 0)
        self.oled.show()
        
    def _clear_press(self):
        for i in range(40, 128, 1):
            self.oled.pixel(i, 48, 0)
            self.oled.pixel(i, 49, 0)
            self.oled.pixel(i, 50, 0)
            self.oled.pixel(i, 51, 0)
            self.oled.pixel(i, 52, 0)
            self.oled.pixel(i, 53, 0)
            self.oled.pixel(i, 54, 0)
            self.oled.pixel(i, 55, 0)
        self.oled.show()